

#等级分为OFF、FATAL、[ERROR、WARN、INFO、DEBUG]、TRACE、ALL或者您定义的级别,括号中为最常用
#定义根日志级别和输出端(定义了两个输出端),第一个参数info是输出级别，之后的都是输出端.file1
log4j.rootLogger=info,console

#定义第一个输出端的参数（输出到控制台  ）
log4j.appender.console=org.apache.log4j.ConsoleAppender  
log4j.appender.console.layout=org.apache.log4j.PatternLayout  
log4j.appender.console.layout.ConversionPattern=%d [%t] %-5p %c(%L) - %m%n  

#定时第二个输出端，输出到文件,该文件最大空间为1024KB，超过1024KB后自动备份，生成新文件  
#log4j.appender.file1=org.apache.log4j.RollingFileAppender  
#log4j.appender.file1.file=d:/logs/photoalbum/photoalbum-admin.log  
#log4j.appender.file1.layout=org.apache.log4j.PatternLayout  
#log4j.appender.file1.layout.conversionPattern=%d [%t] %-5p %c(%L) - %m%n  
#log4j.appender.file1.MaxFileSize=1000KB  
#log4j.appender.file1.MaxBackupIndex=10  



##############以下是定义具体某个包下的日志输出级别#################
#####本项目的日志输出级别
log4j.logger.com.fengtaiguag.photoalbum=DEBUG

#####特殊的设置
#设置hibernate的SQL输出，如果在spring或者hibernate中配置show_sql等参数，将会覆盖这里。
#如果设置为trace,可以输出占位符对应的值。
#log4j.logger.org.hibernate.SQL=trace   
#log4j.logger.org.hibernate.type=trace  


############方便查阅的资料####################################
#####输出类型
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#####输出的样式
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#####输出格式
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。

#####web配置
#spring5.0已经废弃在web中配置的监听器了
